// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLDangKyHocPhan.Contexts;

#nullable disable

namespace QLDangKyHocPhan.Migrations
{
    [DbContext(typeof(QlDangKyHocPhanContext))]
    [Migration("20250520145545_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("TAIKHOAN_VAI_TRO", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("TAIKHOAN_VAI_TRO_CLAIM", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TAIKHOAN_CLAIM", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("TAIKHOAN_LOGIN", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("TAIKHOAN_VAI_TRO_MAP", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("TAIKHOAN_TOKEN", (string)null);
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.CHITIET_CTDT", b =>
                {
                    b.Property<string>("MaCT_CTDT")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaCT")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaHocPhan")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MaCT_CTDT");

                    b.HasIndex("MaCT");

                    b.HasIndex("MaHocPhan");

                    b.ToTable("CHITIET_CTDT", (string)null);
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.CTDAOTAO", b =>
                {
                    b.Property<string>("MaCT")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaKhoa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NamHoc")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("MaCT");

                    b.HasIndex("MaKhoa");

                    b.ToTable("CTDAOTAO", (string)null);
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Giangvien", b =>
                {
                    b.Property<string>("MaGiangVien")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LopHoc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaiKhoanDangKy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MaGiangVien");

                    b.HasIndex("TaiKhoanDangKy");

                    b.ToTable("Giangviens");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Hocphan", b =>
                {
                    b.Property<string>("MaHocPhan")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DKTienQuyet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DKTienQuyet");

                    b.Property<int?>("HocKy")
                        .HasColumnType("int");

                    b.Property<string>("LoaiHocPhan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaKhoa")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("SoTc")
                        .HasColumnType("int")
                        .HasColumnName("SoTC");

                    b.Property<string>("TenHocPhan")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaHocPhan")
                        .HasName("PK__HOCPHAN__9A13F25E14D4648A");

                    b.HasIndex("MaKhoa");

                    b.ToTable("HOCPHAN", (string)null);
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Khoa", b =>
                {
                    b.Property<string>("MaKhoa")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TenKhoa")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaKhoa")
                        .HasName("PK__KHOA__65390405BDF59709");

                    b.ToTable("KHOA", (string)null);
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Lophocphan", b =>
                {
                    b.Property<string>("MaLopHocPhan")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaGiangVien")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaHocPhan")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaHocPhanNavigationMaHocPhan")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NgayHoc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhongHoc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SoLuong")
                        .HasColumnType("int");

                    b.HasKey("MaLopHocPhan")
                        .HasName("PK__LOPHOCPH__82581CD9FD3C38B2");

                    b.HasIndex("MaGiangVien");

                    b.HasIndex("MaHocPhan");

                    b.HasIndex("MaHocPhanNavigationMaHocPhan");

                    b.ToTable("LOPHOCPHAN", (string)null);
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Sinhvien", b =>
                {
                    b.Property<string>("MaSinhVien")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GioiTinh")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaKhoa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaiKhoanId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MaSinhVien");

                    b.HasIndex("MaKhoa");

                    b.HasIndex("TaiKhoanId");

                    b.ToTable("Sinhviens");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Taikhoan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LoaiTaiKhoan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenDangNhap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("TAIKHOAN", (string)null);
                });

            modelBuilder.Entity("YourProjectNamespace.Models.DangKy", b =>
                {
                    b.Property<int>("MaDangKy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaDangKy"));

                    b.Property<string>("LoaiDangKy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MaLopHP")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaSinhVien")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayThucHien")
                        .HasColumnType("datetime2");

                    b.HasKey("MaDangKy");

                    b.HasIndex("MaLopHP");

                    b.HasIndex("MaSinhVien");

                    b.ToTable("DangKys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Taikhoan", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Taikhoan", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLDangKyHocPhan.Models.Taikhoan", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Taikhoan", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.CHITIET_CTDT", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.CTDAOTAO", "CTDAOTAO")
                        .WithMany("ChiTietCtdts")
                        .HasForeignKey("MaCT")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QLDangKyHocPhan.Models.Hocphan", "Hocphan")
                        .WithMany("ChiTietCtdts")
                        .HasForeignKey("MaHocPhan")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CTDAOTAO");

                    b.Navigation("Hocphan");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.CTDAOTAO", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Khoa", "Khoa")
                        .WithMany("CTDAOTAOs")
                        .HasForeignKey("MaKhoa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Khoa");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Giangvien", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Taikhoan", "TaiKhoanDangKyNavigation")
                        .WithMany("Giangviens")
                        .HasForeignKey("TaiKhoanDangKy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaiKhoanDangKyNavigation");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Hocphan", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Khoa", "Khoa")
                        .WithMany("Hocphans")
                        .HasForeignKey("MaKhoa")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Khoa");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Lophocphan", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Giangvien", "MaGiangVienNavigation")
                        .WithMany("Lophocphans")
                        .HasForeignKey("MaGiangVien")
                        .HasConstraintName("FK__LOPHOCPHA__MaGia__5BE2A6F2");

                    b.HasOne("QLDangKyHocPhan.Models.Hocphan", "Hocphan")
                        .WithMany("Lophocphans")
                        .HasForeignKey("MaHocPhan");

                    b.HasOne("QLDangKyHocPhan.Models.Hocphan", "MaHocPhanNavigation")
                        .WithMany()
                        .HasForeignKey("MaHocPhanNavigationMaHocPhan");

                    b.Navigation("Hocphan");

                    b.Navigation("MaGiangVienNavigation");

                    b.Navigation("MaHocPhanNavigation");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.RefreshToken", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Taikhoan", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Sinhvien", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Khoa", "MaKhoaNavigation")
                        .WithMany("Sinhviens")
                        .HasForeignKey("MaKhoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLDangKyHocPhan.Models.Taikhoan", "TaiKhoan")
                        .WithMany("Sinhviens")
                        .HasForeignKey("TaiKhoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaKhoaNavigation");

                    b.Navigation("TaiKhoan");
                });

            modelBuilder.Entity("YourProjectNamespace.Models.DangKy", b =>
                {
                    b.HasOne("QLDangKyHocPhan.Models.Lophocphan", "LopHocPhan")
                        .WithMany()
                        .HasForeignKey("MaLopHP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QLDangKyHocPhan.Models.Sinhvien", "SinhVien")
                        .WithMany()
                        .HasForeignKey("MaSinhVien")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LopHocPhan");

                    b.Navigation("SinhVien");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.CTDAOTAO", b =>
                {
                    b.Navigation("ChiTietCtdts");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Giangvien", b =>
                {
                    b.Navigation("Lophocphans");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Hocphan", b =>
                {
                    b.Navigation("ChiTietCtdts");

                    b.Navigation("Lophocphans");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Khoa", b =>
                {
                    b.Navigation("CTDAOTAOs");

                    b.Navigation("Hocphans");

                    b.Navigation("Sinhviens");
                });

            modelBuilder.Entity("QLDangKyHocPhan.Models.Taikhoan", b =>
                {
                    b.Navigation("Giangviens");

                    b.Navigation("Sinhviens");
                });
#pragma warning restore 612, 618
        }
    }
}
